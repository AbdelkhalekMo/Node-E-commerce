// There're 2 types of Angular applications:
// 1) zone-full (by default)
// 2) zone-less
// The developer can avoid importing the `zone.js` package and tells Angular that
// he is responsible for running the change detection by himself. This is done by
// "nooping" the zone through `CompilerOptions` when bootstrapping the root module.
// eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
const isNgZoneEnabled = typeof Zone !== 'undefined' && !!Zone.current;
/**
 * The function that does the same job as `NgZone.runOutsideAngular`.
 */
export function runOutsideAngular(callback) {
    // The `Zone.root.run` basically will run the `callback` in the most parent zone.
    // Any asynchronous API used inside the `callback` won't catch Angular's zone
    // since `Zone.current` will reference `Zone.root`.
    // The Angular's zone is forked from the `Zone.root`. In this case, `zone.js` won't
    // trigger change detection, and `ApplicationRef.tick()` will not be run.
    // Caretaker note: we're using `Zone.root` except `NgZone.runOutsideAngular` since this
    // will require injecting the `NgZone` facade. That will create a breaking change for
    // projects already using the `@sentry/angular`.
    // eslint-disable-next-line @typescript-eslint/no-unsafe-member-access
    return isNgZoneEnabled ? Zone.root.run(callback) : callback();
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiem9uZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy96b25lLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUlBLDRDQUE0QztBQUM1Qyw0QkFBNEI7QUFDNUIsZUFBZTtBQUNmLGlGQUFpRjtBQUNqRixpRkFBaUY7QUFDakYsbUZBQW1GO0FBQ25GLHNFQUFzRTtBQUN0RSxNQUFNLGVBQWUsR0FBRyxPQUFPLElBQUksS0FBSyxXQUFXLElBQUksQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7QUFFdEU7O0dBRUc7QUFDSCxNQUFNLFVBQVUsaUJBQWlCLENBQUksUUFBaUI7SUFDcEQsaUZBQWlGO0lBQ2pGLDZFQUE2RTtJQUM3RSxtREFBbUQ7SUFDbkQsbUZBQW1GO0lBQ25GLHlFQUF5RTtJQUN6RSx1RkFBdUY7SUFDdkYscUZBQXFGO0lBQ3JGLGdEQUFnRDtJQUNoRCxzRUFBc0U7SUFDdEUsT0FBTyxlQUFlLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsR0FBRyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxRQUFRLEVBQUUsQ0FBQztBQUNoRSxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiLy8gVGhhdCdzIHRoZSBgZ2xvYmFsLlpvbmVgIGV4cG9zZWQgd2hlbiB0aGUgYHpvbmUuanNgIHBhY2thZ2UgaXMgdXNlZC5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tZXhwbGljaXQtYW55XG5kZWNsYXJlIGNvbnN0IFpvbmU6IGFueTtcblxuLy8gVGhlcmUncmUgMiB0eXBlcyBvZiBBbmd1bGFyIGFwcGxpY2F0aW9uczpcbi8vIDEpIHpvbmUtZnVsbCAoYnkgZGVmYXVsdClcbi8vIDIpIHpvbmUtbGVzc1xuLy8gVGhlIGRldmVsb3BlciBjYW4gYXZvaWQgaW1wb3J0aW5nIHRoZSBgem9uZS5qc2AgcGFja2FnZSBhbmQgdGVsbHMgQW5ndWxhciB0aGF0XG4vLyBoZSBpcyByZXNwb25zaWJsZSBmb3IgcnVubmluZyB0aGUgY2hhbmdlIGRldGVjdGlvbiBieSBoaW1zZWxmLiBUaGlzIGlzIGRvbmUgYnlcbi8vIFwibm9vcGluZ1wiIHRoZSB6b25lIHRocm91Z2ggYENvbXBpbGVyT3B0aW9uc2Agd2hlbiBib290c3RyYXBwaW5nIHRoZSByb290IG1vZHVsZS5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdW5zYWZlLW1lbWJlci1hY2Nlc3NcbmNvbnN0IGlzTmdab25lRW5hYmxlZCA9IHR5cGVvZiBab25lICE9PSAndW5kZWZpbmVkJyAmJiAhIVpvbmUuY3VycmVudDtcblxuLyoqXG4gKiBUaGUgZnVuY3Rpb24gdGhhdCBkb2VzIHRoZSBzYW1lIGpvYiBhcyBgTmdab25lLnJ1bk91dHNpZGVBbmd1bGFyYC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIHJ1bk91dHNpZGVBbmd1bGFyPFQ+KGNhbGxiYWNrOiAoKSA9PiBUKTogVCB7XG4gIC8vIFRoZSBgWm9uZS5yb290LnJ1bmAgYmFzaWNhbGx5IHdpbGwgcnVuIHRoZSBgY2FsbGJhY2tgIGluIHRoZSBtb3N0IHBhcmVudCB6b25lLlxuICAvLyBBbnkgYXN5bmNocm9ub3VzIEFQSSB1c2VkIGluc2lkZSB0aGUgYGNhbGxiYWNrYCB3b24ndCBjYXRjaCBBbmd1bGFyJ3Mgem9uZVxuICAvLyBzaW5jZSBgWm9uZS5jdXJyZW50YCB3aWxsIHJlZmVyZW5jZSBgWm9uZS5yb290YC5cbiAgLy8gVGhlIEFuZ3VsYXIncyB6b25lIGlzIGZvcmtlZCBmcm9tIHRoZSBgWm9uZS5yb290YC4gSW4gdGhpcyBjYXNlLCBgem9uZS5qc2Agd29uJ3RcbiAgLy8gdHJpZ2dlciBjaGFuZ2UgZGV0ZWN0aW9uLCBhbmQgYEFwcGxpY2F0aW9uUmVmLnRpY2soKWAgd2lsbCBub3QgYmUgcnVuLlxuICAvLyBDYXJldGFrZXIgbm90ZTogd2UncmUgdXNpbmcgYFpvbmUucm9vdGAgZXhjZXB0IGBOZ1pvbmUucnVuT3V0c2lkZUFuZ3VsYXJgIHNpbmNlIHRoaXNcbiAgLy8gd2lsbCByZXF1aXJlIGluamVjdGluZyB0aGUgYE5nWm9uZWAgZmFjYWRlLiBUaGF0IHdpbGwgY3JlYXRlIGEgYnJlYWtpbmcgY2hhbmdlIGZvclxuICAvLyBwcm9qZWN0cyBhbHJlYWR5IHVzaW5nIHRoZSBgQHNlbnRyeS9hbmd1bGFyYC5cbiAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIEB0eXBlc2NyaXB0LWVzbGludC9uby11bnNhZmUtbWVtYmVyLWFjY2Vzc1xuICByZXR1cm4gaXNOZ1pvbmVFbmFibGVkID8gWm9uZS5yb290LnJ1bihjYWxsYmFjaykgOiBjYWxsYmFjaygpO1xufVxuIl19