import { VERSION } from '@angular/core';
import { getDefaultIntegrations, init as browserInit, setContext } from '@sentry/browser';
import { applySdkMetadata } from '@sentry/core';
import { logger } from '@sentry/utils';
import { IS_DEBUG_BUILD } from './flags';
/**
 * Inits the Angular SDK
 */
export function init(options) {
    const opts = Object.assign({ 
        // Filter out TryCatch integration as it interferes with our Angular `ErrorHandler`:
        // TryCatch would catch certain errors before they reach the `ErrorHandler` and thus provide a
        // lower fidelity error than what `SentryErrorHandler` (see errorhandler.ts) would provide.
        // see:
        //  - https://github.com/getsentry/sentry-javascript/issues/5417#issuecomment-1453407097
        //  - https://github.com/getsentry/sentry-javascript/issues/2744
        defaultIntegrations: getDefaultIntegrations(options).filter(integration => {
            return integration.name !== 'TryCatch';
        }) }, options);
    applySdkMetadata(opts, 'angular-ivy');
    checkAndSetAngularVersion();
    browserInit(opts);
}
function checkAndSetAngularVersion() {
    const ANGULAR_MINIMUM_VERSION = 12;
    const angularVersion = VERSION && VERSION.major ? parseInt(VERSION.major, 10) : undefined;
    if (angularVersion) {
        if (angularVersion < ANGULAR_MINIMUM_VERSION) {
            IS_DEBUG_BUILD &&
                logger.warn(`This Sentry SDK does not officially support Angular ${angularVersion}.`, `This SDK only supports Angular ${ANGULAR_MINIMUM_VERSION} and above.`, "If you're using Angular 10 or 11, please use `@sentry/angular` instead.", 'Otherwise, please consider upgrading your Angular version.');
        }
        setContext('angular', { version: angularVersion });
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic2RrLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vc3JjL3Nkay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxPQUFPLEVBQUUsT0FBTyxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXhDLE9BQU8sRUFBRSxzQkFBc0IsRUFBRSxJQUFJLElBQUksV0FBVyxFQUFFLFVBQVUsRUFBRSxNQUFNLGlCQUFpQixDQUFDO0FBQzFGLE9BQU8sRUFBRSxnQkFBZ0IsRUFBRSxNQUFNLGNBQWMsQ0FBQztBQUNoRCxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBRXZDLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxTQUFTLENBQUM7QUFFekM7O0dBRUc7QUFDSCxNQUFNLFVBQVUsSUFBSSxDQUFDLE9BQXVCO0lBQzFDLE1BQU0sSUFBSTtRQUNSLG9GQUFvRjtRQUNwRiw4RkFBOEY7UUFDOUYsMkZBQTJGO1FBQzNGLE9BQU87UUFDUCx3RkFBd0Y7UUFDeEYsZ0VBQWdFO1FBQ2hFLG1CQUFtQixFQUFFLHNCQUFzQixDQUFDLE9BQU8sQ0FBQyxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsRUFBRTtZQUN4RSxPQUFPLFdBQVcsQ0FBQyxJQUFJLEtBQUssVUFBVSxDQUFDO1FBQ3pDLENBQUMsQ0FBQyxJQUNDLE9BQU8sQ0FDWCxDQUFDO0lBRUYsZ0JBQWdCLENBQUMsSUFBSSxFQUFFLGFBQWEsQ0FBQyxDQUFDO0lBRXRDLHlCQUF5QixFQUFFLENBQUM7SUFDNUIsV0FBVyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBQ3BCLENBQUM7QUFFRCxTQUFTLHlCQUF5QjtJQUNoQyxNQUFNLHVCQUF1QixHQUFHLEVBQUUsQ0FBQztJQUVuQyxNQUFNLGNBQWMsR0FBRyxPQUFPLElBQUksT0FBTyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsUUFBUSxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQztJQUUxRixJQUFJLGNBQWMsRUFBRTtRQUNsQixJQUFJLGNBQWMsR0FBRyx1QkFBdUIsRUFBRTtZQUM1QyxjQUFjO2dCQUNaLE1BQU0sQ0FBQyxJQUFJLENBQ1QsdURBQXVELGNBQWMsR0FBRyxFQUN4RSxrQ0FBa0MsdUJBQXVCLGFBQWEsRUFDdEUseUVBQXlFLEVBQ3pFLDREQUE0RCxDQUM3RCxDQUFDO1NBQ0w7UUFDRCxVQUFVLENBQUMsU0FBUyxFQUFFLEVBQUUsT0FBTyxFQUFFLGNBQWMsRUFBRSxDQUFDLENBQUM7S0FDcEQ7QUFDSCxDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgVkVSU0lPTiB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHR5cGUgeyBCcm93c2VyT3B0aW9ucyB9IGZyb20gJ0BzZW50cnkvYnJvd3Nlcic7XG5pbXBvcnQgeyBnZXREZWZhdWx0SW50ZWdyYXRpb25zLCBpbml0IGFzIGJyb3dzZXJJbml0LCBzZXRDb250ZXh0IH0gZnJvbSAnQHNlbnRyeS9icm93c2VyJztcbmltcG9ydCB7IGFwcGx5U2RrTWV0YWRhdGEgfSBmcm9tICdAc2VudHJ5L2NvcmUnO1xuaW1wb3J0IHsgbG9nZ2VyIH0gZnJvbSAnQHNlbnRyeS91dGlscyc7XG5cbmltcG9ydCB7IElTX0RFQlVHX0JVSUxEIH0gZnJvbSAnLi9mbGFncyc7XG5cbi8qKlxuICogSW5pdHMgdGhlIEFuZ3VsYXIgU0RLXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpbml0KG9wdGlvbnM6IEJyb3dzZXJPcHRpb25zKTogdm9pZCB7XG4gIGNvbnN0IG9wdHMgPSB7XG4gICAgLy8gRmlsdGVyIG91dCBUcnlDYXRjaCBpbnRlZ3JhdGlvbiBhcyBpdCBpbnRlcmZlcmVzIHdpdGggb3VyIEFuZ3VsYXIgYEVycm9ySGFuZGxlcmA6XG4gICAgLy8gVHJ5Q2F0Y2ggd291bGQgY2F0Y2ggY2VydGFpbiBlcnJvcnMgYmVmb3JlIHRoZXkgcmVhY2ggdGhlIGBFcnJvckhhbmRsZXJgIGFuZCB0aHVzIHByb3ZpZGUgYVxuICAgIC8vIGxvd2VyIGZpZGVsaXR5IGVycm9yIHRoYW4gd2hhdCBgU2VudHJ5RXJyb3JIYW5kbGVyYCAoc2VlIGVycm9yaGFuZGxlci50cykgd291bGQgcHJvdmlkZS5cbiAgICAvLyBzZWU6XG4gICAgLy8gIC0gaHR0cHM6Ly9naXRodWIuY29tL2dldHNlbnRyeS9zZW50cnktamF2YXNjcmlwdC9pc3N1ZXMvNTQxNyNpc3N1ZWNvbW1lbnQtMTQ1MzQwNzA5N1xuICAgIC8vICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9nZXRzZW50cnkvc2VudHJ5LWphdmFzY3JpcHQvaXNzdWVzLzI3NDRcbiAgICBkZWZhdWx0SW50ZWdyYXRpb25zOiBnZXREZWZhdWx0SW50ZWdyYXRpb25zKG9wdGlvbnMpLmZpbHRlcihpbnRlZ3JhdGlvbiA9PiB7XG4gICAgICByZXR1cm4gaW50ZWdyYXRpb24ubmFtZSAhPT0gJ1RyeUNhdGNoJztcbiAgICB9KSxcbiAgICAuLi5vcHRpb25zLFxuICB9O1xuXG4gIGFwcGx5U2RrTWV0YWRhdGEob3B0cywgJ2FuZ3VsYXItaXZ5Jyk7XG5cbiAgY2hlY2tBbmRTZXRBbmd1bGFyVmVyc2lvbigpO1xuICBicm93c2VySW5pdChvcHRzKTtcbn1cblxuZnVuY3Rpb24gY2hlY2tBbmRTZXRBbmd1bGFyVmVyc2lvbigpOiB2b2lkIHtcbiAgY29uc3QgQU5HVUxBUl9NSU5JTVVNX1ZFUlNJT04gPSAxMjtcblxuICBjb25zdCBhbmd1bGFyVmVyc2lvbiA9IFZFUlNJT04gJiYgVkVSU0lPTi5tYWpvciA/IHBhcnNlSW50KFZFUlNJT04ubWFqb3IsIDEwKSA6IHVuZGVmaW5lZDtcblxuICBpZiAoYW5ndWxhclZlcnNpb24pIHtcbiAgICBpZiAoYW5ndWxhclZlcnNpb24gPCBBTkdVTEFSX01JTklNVU1fVkVSU0lPTikge1xuICAgICAgSVNfREVCVUdfQlVJTEQgJiZcbiAgICAgICAgbG9nZ2VyLndhcm4oXG4gICAgICAgICAgYFRoaXMgU2VudHJ5IFNESyBkb2VzIG5vdCBvZmZpY2lhbGx5IHN1cHBvcnQgQW5ndWxhciAke2FuZ3VsYXJWZXJzaW9ufS5gLFxuICAgICAgICAgIGBUaGlzIFNESyBvbmx5IHN1cHBvcnRzIEFuZ3VsYXIgJHtBTkdVTEFSX01JTklNVU1fVkVSU0lPTn0gYW5kIGFib3ZlLmAsXG4gICAgICAgICAgXCJJZiB5b3UncmUgdXNpbmcgQW5ndWxhciAxMCBvciAxMSwgcGxlYXNlIHVzZSBgQHNlbnRyeS9hbmd1bGFyYCBpbnN0ZWFkLlwiLFxuICAgICAgICAgICdPdGhlcndpc2UsIHBsZWFzZSBjb25zaWRlciB1cGdyYWRpbmcgeW91ciBBbmd1bGFyIHZlcnNpb24uJyxcbiAgICAgICAgKTtcbiAgICB9XG4gICAgc2V0Q29udGV4dCgnYW5ndWxhcicsIHsgdmVyc2lvbjogYW5ndWxhclZlcnNpb24gfSk7XG4gIH1cbn1cbiJdfQ==